#!/bin/sh /etc/rc.common
# Copyright 2017-2022 Stan Grishin (stangri@melmac.ca)
# shellcheck disable=SC1091,SC2016,SC3043,SC3057,SC3060

# shellcheck disable=SC2034
START=94
# shellcheck disable=SC2034
USE_PROCD=1
LC_ALL=C

readonly PKG_VERSION='dev-test'
readonly packageName='3rd-party-dns'
readonly serviceName="$packageName $PKG_VERSION"
readonly packageConfigFile="/etc/config/${packageName}"
readonly _OK_='\033[0;32m\xe2\x9c\x93\033[0m'
readonly _FAIL_='\033[0;31m\xe2\x9c\x97\033[0m'
readonly __OK__='\033[0;32m[\xe2\x9c\x93]\033[0m'
readonly __FAIL__='\033[0;31m[\xe2\x9c\x97]\033[0m'
readonly _ERROR_='\033[0;31mERROR\033[0m'
readonly _WARNING_='\033[0;33mWARNING\033[0m'

output_ok() { output 1 "$_OK_"; output 2 "$__OK__\\n"; }
output_okn() { output 1 "$_OK_\\n"; output 2 "$__OK__\\n"; }
output_fail() { output 1 "$_FAIL_"; output 2 "$__FAIL__\\n"; }
output_failn() { output 1 "$_FAIL_\\n"; output 2 "$__FAIL__\\n"; }
dnsmasq_hup() { killall -q -s HUP dnsmasq; }
dnsmasq_kill() { killall -q -s KILL dnsmasq; }
dnsmasq_restart() { /etc/init.d/dnsmasq restart >/dev/null 2>&1; }
unbound_restart() { /etc/init.d/unbound restart >/dev/null 2>&1; }
is_present() { command -v "$1" >/dev/null 2>&1; }

output() {
# Can take a single parameter (text) to be output at any verbosity
# Or target verbosity level and text to be output at specifc verbosity
	local msg memmsg logmsg
	local sharedMemoryOutput="/dev/shm/$packageName-output"
	verbosity="${verbosity:-2}"
	if [ $# -ne 1 ]; then
		if [ $((verbosity & $1)) -gt 0 ] || [ "$verbosity" = "$1" ]; then shift; else return 0; fi
	fi
	[ -t 1 ] && printf "%b" "$1"
	msg="${1//$serviceName /service }";
	if [ "$(printf "%b" "$msg" | wc -l)" -gt 0 ]; then
		[ -s "$sharedMemoryOutput" ] && memmsg="$(cat "$sharedMemoryOutput")"
		logmsg="$(printf "%b" "${memmsg}${msg}" | sed 's/\x1b\[[0-9;]*m//g')"
		logger -t "${packageName:-service} [$$]" "$(printf "%b" "$logmsg")"
		rm -f "$sharedMemoryOutput"
	else
		printf "%b" "$msg" >> "$sharedMemoryOutput"
	fi
}

third_party_start() {
	local validation_result="$3" i
	if [ "$validation_result" != '0' ]; then
		output "Please check if the '$packageConfigFile' contains correct values for config options.\\n"
		return 1
	fi
	if is_present dnsmasq && /etc/init.d/dnsmasq enabled >/dev/null 2>&1; then
		for i in $dnsmasq_service; do
			"/etc/init.d/${i}" start
		done
	fi
	if is_present unbound && /etc/init.d/unbound enabled >/dev/null 2>&1; then
		for i in $unbound_service; do
			"/etc/init.d/${i}" start
		done
	fi
}

third_party_stop() {
	local validation_result="$3" i
	if [ "$validation_result" != '0' ]; then
		output "Please check if the '$packageConfigFile' contains correct values for config options.\\n"
		return 1
	fi
	if is_present dnsmasq && /etc/init.d/dnsmasq enabled >/dev/null 2>&1; then
		for i in $dnsmasq_service; do
			"/etc/init.d/${i}" stop
		done
	fi
	if is_present unbound && /etc/init.d/unbound enabled >/dev/null 2>&1; then
		for i in $unbound_service; do
			"/etc/init.d/${i}" stop
		done
	fi
}

boot() { return 0; }
start_service() { load_validate_config 'config' third_party_start "'$*'"; }
stop_service() { load_validate_config 'config' third_party_stop "'$*'"; }
version() { echo "$PKG_VERSION"; }

load_validate_config() {
	local enabled
	local dnsmasq_service
	local unbound_service
	uci_load_validate "$packageName" "$packageName" "$1" "${2}${3:+ $3}" \
		'enabled:bool:0' \
		'dnsmasq_service:or(list(string, "")):""' \
		'unbound_service:or(list(string, "")):""'
}
